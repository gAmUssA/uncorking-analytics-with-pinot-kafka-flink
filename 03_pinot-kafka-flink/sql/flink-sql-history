1728426102520:CREATE TABLE Movies\n(\n    movieId             INT,\n    title               STRING,\n    releaseYear         INT,\n    country             STRING,\n    rating DOUBLE,\n    genres              ARRAY<STRING>,\n    actors              ARRAY<STRING>,\n    directors           ARRAY<STRING>,\n    composers           ARRAY<STRING>,\n    screenwriters       ARRAY<STRING>,\n    productionCompanies ARRAY<STRING>,\n    cinematographer     STRING\n) WITH (\n      'connector' = 'kafka',\n      'topic' = 'movies',\n      'properties.bootstrap.servers' = 'kafka:9092',\n      'scan.startup.mode' = 'earliest-offset',\n      'format' = 'json'\n      );
1728426110493:CREATE TABLE MovieRatings\n(\n    movieId          INT,\n    rating DOUBLE,\n    ratingTimeMillis BIGINT,                            -- Read the epoch milliseconds as BIGINT\n    ratingTime AS TO_TIMESTAMP_LTZ(ratingTimeMillis, 3) -- Convert to TIMESTAMP_LTZ\n) WITH (\n      'connector' = 'kafka',\n      'topic' = 'movie_ratings',\n      'properties.bootstrap.servers' = 'kafka:9092',\n      'scan.startup.mode' = 'latest-offset',\n      'format' = 'json'\n      );
1728426120925:SELECT *\nFROM Movies\nWHERE LOWER(title) LIKE '%lethal weapon%';
1728426159725:SELECT movieId, AVG(rating) as avgRating\nFROM MovieRatings\nGROUP BY movieId;
1728426189465:SELECT movieId, rating, ratingTime\nFROM MovieRatings LIMIT 10;
1728426214816:CREATE TABLE RatedMoviesSink    -- <1>\n(\n    movieId     INT,\n    title       STRING,\n    releaseYear INT,\n    actors      ARRAY<STRING>,\n    rating DOUBLE,\n    ratingTime  TIMESTAMP(3),\n    PRIMARY KEY (movieId) NOT ENFORCED -- Declare the PRIMARY KEY constraint\n) WITH (\n      'connector' = 'upsert-kafka', -- This enables updates and deletes\n      'topic' = 'rated_movies',\n      'properties.bootstrap.servers' = 'kafka:9092',\n      'key.format' = 'json', -- Key format is JSON, matching the value format\n      'value.format' = 'json' -- Values are serialized in JSON\n      );
1728426229663:SELECT m.movieId,\n       m.title,\n       m.releaseYear,\n       m.actors,\n       r.rating,\n       r.ratingTime\nFROM MovieRatings r\n         JOIN\n     Movies m\n     ON r.movieId = m.movieId;
1728426246455:INSERT INTO RatedMoviesSink     -- <2>\nSELECT m.movieId,\n       m.title,\n       m.releaseYear,\n       m.actors,\n       r.rating,\n       r.ratingTime\nFROM MovieRatings r\n         JOIN\n     Movies m\n     ON r.movieId = m.movieId;
1728431978382:CREATE TABLE Movies\n(\n    movieId             INT,\n    title               STRING,\n    releaseYear         INT,\n    country             STRING,\n    rating DOUBLE,\n    genres              ARRAY<STRING>,\n    actors              ARRAY<STRING>,\n    directors           ARRAY<STRING>,\n    composers           ARRAY<STRING>,\n    screenwriters       ARRAY<STRING>,\n    productionCompanies ARRAY<STRING>,\n    cinematographer     STRING\n) WITH (\n      'connector' = 'kafka',\n      'topic' = 'movies',\n      'properties.bootstrap.servers' = 'kafka:9092',\n      'scan.startup.mode' = 'earliest-offset',\n      'format' = 'json'\n      );
1728432049924:CREATE TABLE MovieRatings\n(\n    movieId          INT,\n    rating DOUBLE,\n    ratingTimeMillis BIGINT,                            -- Read the epoch milliseconds as BIGINT\n    ratingTime AS TO_TIMESTAMP_LTZ(ratingTimeMillis, 3) -- Convert to TIMESTAMP_LTZ\n) WITH (\n      'connector' = 'kafka',\n      'topic' = 'movie_ratings',\n      'properties.bootstrap.servers' = 'kafka:9092',\n      'scan.startup.mode' = 'latest-offset',\n      'format' = 'json'\n      );
1728432068940:SELECT *\nFROM Movies\nWHERE LOWER(title) LIKE '%lethal weapon%';
1728432130746:SELECT movieId, AVG(rating) as avgRating\nFROM MovieRatings\nGROUP BY movieId;
1728432167391:CREATE TABLE RatedMoviesSink    -- <1>\n(\n    movieId     INT,\n    title       STRING,\n    releaseYear INT,\n    actors      ARRAY<STRING>,\n    rating DOUBLE,\n    ratingTime  TIMESTAMP(3),\n    PRIMARY KEY (movieId) NOT ENFORCED -- Declare the PRIMARY KEY constraint\n) WITH (\n      'connector' = 'upsert-kafka', -- This enables updates and deletes\n      'topic' = 'rated_movies',\n      'properties.bootstrap.servers' = 'kafka:9092',\n      'key.format' = 'json', -- Key format is JSON, matching the value format\n      'value.format' = 'json' -- Values are serialized in JSON\n      );
1728432183570:SELECT m.movieId,\n       m.title,\n       m.releaseYear,\n       m.actors,\n       r.rating,\n       r.ratingTime\nFROM MovieRatings r\n         JOIN\n     Movies m\n     ON r.movieId = m.movieId;
1728432225909:INSERT INTO RatedMoviesSink     -- <2>\nSELECT m.movieId,\n       m.title,\n       m.releaseYear,\n       m.actors,\n       r.rating,\n       r.ratingTime\nFROM MovieRatings r\n         JOIN\n     Movies m\n     ON r.movieId = m.movieId;
1728433449023:exit\n;
